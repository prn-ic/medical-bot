from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from utils.states import AuthState
from database.query.get import get_question, get_user_role_by_name
from database.commands.post import *
from keyboards.keyboards import welcome_keyboard, user_main_keyboard
import re


async def start(message: types.Message):
    await message.answer(get_question('start').answer, reply_markup=welcome_keyboard)


async def skip_auth(message: types.Message):
    await message.answer(get_question('user_help').answer,
                         reply_markup=user_main_keyboard,
                         parse_mode="Markdown")


async def auth(message: types.Message, state: FSMContext):
    await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:')
    await state.set_state(AuthState.wait_firstname)


async def auth_set_firstname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer('üñä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ')

    await state.set_state(AuthState.wait_patronymic)


async def auth_set_patronymic(message: types.Message, state: FSMContext):
    await state.update_data(firstname=message.text)
    await message.answer('üñä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ: ')

    await state.set_state(AuthState.wait_phone)


async def auth_set_phone(message: types.Message, state: FSMContext):
    await state.update_data(patronymic=message.text)
    await message.answer('üñä –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, '
                         '—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

    await state.set_state(AuthState.wait_email)


async def auth_set_email(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer('üñä –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:')

    await state.set_state(AuthState.wait_end)


async def auth_end_sign_in(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)

    user_data = await state.get_data()

    validate_phone_number_pattern = "^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?" \
                                    "[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$"

    employee_role = get_user_role_by_name('Employee')
    employee_info = UserInfo()
    employee_user = User()
    employee_user.id = uuid.uuid4()
    employee_user.telegram_id = message.from_user.id
    create_user(employee_user)

    employee_info.role = employee_role
    employee_info.user = employee_user
    employee_info.first_name = user_data['firstname']
    employee_info.surname = user_data['surname']
    employee_info.patronymic = user_data['patronymic']
    employee_info.phone = user_data['phone']
    employee_info.email = user_data['email']

    try:
        if not (re.match(r"[^@]+@[^@]+\.[^@]+", user_data['email'])) or not \
                (re.match(validate_phone_number_pattern, user_data['phone'])):
            raise Exception('Invalid data')

        create_user_info(employee_info)

        await message.answer('‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.‚úÖ\n'
                             '–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n'
                             '–í–∞—Å —É–≤–µ–¥–æ–º—è—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ '
                             '–ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –ª–∏–±–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è '
                             '–ø—Ä–æ–π–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ')
    except:
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å! ‚ùå\n"
                             "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: \n‚Ä¢ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                             "‚Ä¢ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –¥–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n"
                             "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ")

    await state.finish()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(skip_auth, lambda message: message.text == 'üö∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    dp.register_message_handler(auth, lambda message: message.text == 'üöª –ù–∞—á–∞—Ç—å', state=None)
    dp.register_message_handler(auth_set_firstname, state=AuthState.wait_firstname)
    dp.register_message_handler(auth_set_patronymic, state=AuthState.wait_patronymic)
    dp.register_message_handler(auth_set_phone, state=AuthState.wait_phone)
    dp.register_message_handler(auth_set_email, state=AuthState.wait_email)
    dp.register_message_handler(auth_end_sign_in, state=AuthState.wait_end)
