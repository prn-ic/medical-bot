from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from utils.states import AuthState
from database.query.get import get_question
from keyboards.keyboards import welcome_keyboard, user_main_keyboard


async def start(message: types.Message):
    await message.answer(get_question('start').answer, reply_markup=welcome_keyboard)


async def skip_auth(message: types.Message):
    await message.answer(get_question('user_help').answer,
                         reply_markup=user_main_keyboard,
                         parse_mode="Markdown")


async def auth(message: types.Message, state: FSMContext):
    await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:')
    await state.set_state(AuthState.wait_surname)


async def auth_set_firstname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer('üñä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ')

    await state.set_state(AuthState.wait_firstname)


async def auth_set_patronymic(message: types.Message, state: FSMContext):
    await state.update_data(firstname=message.text)
    await message.answer('üñä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ: ')


async def auth_set_phone(message: types.Message, state: FSMContext):
    await state.update_data(patronymic=message.text)
    await message.answer('üñä –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, '
                         '—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

    await state.set_state(AuthState.wait_phone)


async def auth_set_email(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer('üñä –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:')

    await state.set_state(AuthState.wait_phone)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(skip_auth, lambda message: message.text == 'üö∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
