import uuid

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from database.models import SupportTopic, SupportTopicMessage
from database.query.get import get_question
from database.commands.post import create_support_topic, create_support_topic_message
from database.query.get import get_establishments_by_city_name, get_same_answers, \
    get_establisments_cities, get_establishment_by_id, get_answer_by_id
from keyboards.keyboards import additional_contact_info_keyboard, not_found_answer_keyboard, \
    user_main_keyboard, user_information_keyboard, go_menu_keyboard
from utils.states import SearchState, SupportState


async def help_command(message: types.Message):
    await message.answer(get_question('user_help').answer, reply_markup=user_main_keyboard,
                         parse_mode='Markdown')


async def get_info(message: types.Message):
    await message.answer('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', reply_markup=go_menu_keyboard)
    await message.answer('üìç –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                         reply_markup=user_information_keyboard)


async def go_menu(message: types.Message):
    await message.answer('‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é', reply_markup=user_main_keyboard, parse_mode='Markdown')


async def ask_a_question(message: types.Message, state: FSMContext):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ: ")
    await state.set_state(SearchState.search_value)


async def get_question_answer(message: types.Message, state: FSMContext):
    await message.answer(f'üîé –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç ...')

    questions = get_same_answers(message.text.lower())

    keyboard = types.InlineKeyboardMarkup()

    if len(questions) == 0:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π,'
                             ' –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ',
                             reply_markup=not_found_answer_keyboard)
    else:
        for answer in questions:
            question = get_question(answer)
            keyboard.add(types.InlineKeyboardButton(question.command_name,
                                                    callback_data=f'search_by '
                                                                  f'{question.id}'))
        await message.answer('üîé –ù–∞—à–ª–∏ –¥–ª—è –≤–∞—Å —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ.\n'
                             '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º '
                             '–ø–æ–¥—Ö–æ–¥–∏—Ç:', reply_markup=keyboard)

    await state.finish()


async def search_by_id_callback(callback: types.CallbackQuery):
    text = f'üì≠**–û—Ç–≤–µ—Ç:** \n' \
           f'{get_answer_by_id(callback.data.replace("search_by ", ""))}'

    await callback.message.answer(text,
                                  reply_markup=go_menu_keyboard,
                                  parse_mode='Markdown')


async def find_establishments(callback: types.CallbackQuery):
    establishments = get_establisments_cities()
    keyboard = types.InlineKeyboardMarkup()
    for city in list(set(establishments)):
        keyboard.add(types.InlineKeyboardButton(city,
                                                callback_data=f'find_establisment_by_city {city}'))

    await callback.message.edit_text('üè• –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:', reply_markup=keyboard)


async def find_establishments_by_city_callback(callback: types.CallbackQuery):
    city = callback.data.replace('find_establisment_by_city ', '')
    establishments = get_establishments_by_city_name(city)
    keyboard = types.InlineKeyboardMarkup()
    for establishment in establishments:
        keyboard.add(types.InlineKeyboardButton(establishment.name,
                                                callback_data=f'find_establisment_by_id '
                                                              f'{establishment.id}'))

    await callback.message.edit_text(f'üìç–§–∏–ª–∏–∞–ª—ã –≤ –≥–æ—Ä–æ–¥–µ {city}üìç\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã '
                                     '–ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', reply_markup=keyboard)


async def find_establishments_by_name_callback(callback: types.CallbackQuery):
    establishment = get_establishment_by_id(callback.data
                                            .replace('find_establisment_by_id ', ''))

    text = f'‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏ ‚ÑπÔ∏è\n' \
           f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:\n ‚Ä¢<b>{establishment.name}</b>\n' \
           f'–ê–¥—Ä–µ—Å:\n ‚Ä¢<b>{establishment.address}</b>\n' \
           f'–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n ‚Ä¢<b>{establishment.description}</b>\n' \
           f'–ì–æ—Ä–æ–¥:\n ‚Ä¢<b>{establishment.city_name}</b>\n'

    await callback.message.answer(text, reply_markup=go_menu_keyboard,
                                  parse_mode="HTML")
    await callback.message.answer('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ: üìç')
    await callback.bot.send_location(chat_id=callback.message.chat.id,
                                     latitude=establishment.coord_latitude,
                                     longitude=establishment.coord_longitude)


async def contact_info_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(get_question('contact_info').answer,
                                     reply_markup=additional_contact_info_keyboard,
                                     parse_mode='HTML')


async def get_support(message: types.Message, state: FSMContext):
    await message.answer('‚úâÔ∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ. ‚úâÔ∏è\n\n'
                         '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '
                         '—Å –æ—Ç–≤–µ—Ç–æ–º.')
    await state.set_state(SupportState.wait_content)


async def send_answer_to_support(message: types.Message, state: FSMContext):
    try:
        support_topic = SupportTopic()
        topic_message = SupportTopicMessage()
        support_topic.id = uuid.uuid4()
        support_topic.responder_telegram_id = message.from_user.id

        topic_message.topic = support_topic
        topic_message.content = message.text

        create_support_topic(support_topic)
        create_support_topic_message(topic_message)

        await message.answer('‚úÖ–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.‚úÖ\n'
                             '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: \n'
                             f'```{message.text}```'
                             '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!', reply_markup=user_main_keyboard, parse_mode='Markdown')

    except:
        await message.answer('‚ùå–í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.‚ùå\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!', reply_markup=user_main_keyboard)

    finally:
        await state.finish()


def register_handlers_user(dp: Dispatcher):
    dp.register_message_handler(help_command, commands=['help'])
    dp.register_message_handler(help_command, lambda message: message.text == 'üìç –ü–æ–º–æ—â—å')
    dp.register_message_handler(get_info, lambda message: message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    dp.register_message_handler(get_info, commands=['info'])
    dp.register_message_handler(go_menu, commands=['menu'])
    dp.register_message_handler(go_menu, lambda message: message.text == '‚Ü©Ô∏è –í –º–µ–Ω—é')
    dp.register_message_handler(ask_a_question,
                                lambda message: message.text == '‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
                                state=None)
    dp.register_message_handler(get_question_answer, state=SearchState.search_value)
    dp.register_callback_query_handler(find_establishments, text='info_establishment')
    dp.register_callback_query_handler(find_establishments_by_city_callback,
                                       Text(startswith='find_establisment_by_city '))
    dp.register_callback_query_handler(find_establishments_by_name_callback,
                                       Text(startswith='find_establisment_by_id '))
    dp.register_callback_query_handler(contact_info_callback,
                                       Text(startswith='info_contact'))
    dp.register_callback_query_handler(search_by_id_callback,
                                       Text(startswith='search_by '))
    dp.register_message_handler(get_support,
                                lambda message: message.text == '‚òéÔ∏è –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                state=None)
    dp.register_message_handler(send_answer_to_support, state=SupportState.wait_content)
